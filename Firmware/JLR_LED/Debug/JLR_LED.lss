
JLR_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000944  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802006  00802006  000009de  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c83  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169d  00000000  00000000  00005933  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005103  00000000  00000000  00006fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  0000c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002daa1  00000000  00000000  0000c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000155d  00000000  00000000  0003a085  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0003b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00011fbf  00000000  00000000  0003b83a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c2       	rjmp	.+1248   	; 0x50a <__vector_10>
  2a:	00 00       	nop
  2c:	6f c1       	rjmp	.+734    	; 0x30c <__vector_11>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 e4       	ldi	r30, 0x44	; 68
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a6 e0       	ldi	r26, 0x06	; 6
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a6 31       	cpi	r26, 0x16	; 22
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	33 d3       	rcall	.+1638   	; 0x8a8 <main>
 242:	7e c3       	rjmp	.+1788   	; 0x940 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <rtc_get_time>:
 *       sleep.
 * \note Without this errata this function can block for up to 1 RTC
 *       clock source cycle after waking up from sleep.
 */
uint32_t rtc_get_time(void)
{
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
 24a:	e0 e0       	ldi	r30, 0x00	; 0
 24c:	f4 e0       	ldi	r31, 0x04	; 4
 24e:	81 81       	ldd	r24, Z+1	; 0x01
{
	irqflags_t flags;
	uint16_t   count_high;
	uint16_t   count_low;

	while (rtc_is_busy());
 250:	80 fd       	sbrc	r24, 0
 252:	fd cf       	rjmp	.-6      	; 0x24e <rtc_get_time+0x8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 254:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
 256:	f8 94       	cli

	flags = cpu_irq_save();
	count_high = rtc_data.counter_high;
 258:	40 91 0c 20 	lds	r20, 0x200C
 25c:	50 91 0d 20 	lds	r21, 0x200D
	count_low = RTC.CNT;
 260:	80 91 08 04 	lds	r24, 0x0408
 264:	90 91 09 04 	lds	r25, 0x0409
	// Test for possible pending increase of high count value
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	31 f4       	brne	.+12     	; 0x278 <rtc_get_time+0x32>
 26c:	30 91 03 04 	lds	r19, 0x0403
 270:	30 ff       	sbrs	r19, 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <rtc_get_time+0x32>
		count_high++;
 274:	4f 5f       	subi	r20, 0xFF	; 255
 276:	5f 4f       	sbci	r21, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 278:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	ba 01       	movw	r22, r20
 280:	55 27       	eor	r21, r21
 282:	44 27       	eor	r20, r20
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	8a 01       	movw	r16, r20
 28a:	9b 01       	movw	r18, r22
 28c:	08 2b       	or	r16, r24
 28e:	19 2b       	or	r17, r25
 290:	2a 2b       	or	r18, r26
 292:	3b 2b       	or	r19, r27
 294:	c9 01       	movw	r24, r18
 296:	b8 01       	movw	r22, r16
}
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 29e:	e0 e0       	ldi	r30, 0x00	; 0
 2a0:	f4 e0       	ldi	r31, 0x04	; 4
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
 2a6:	64 87       	std	Z+12, r22	; 0x0c
 2a8:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
 2aa:	ec e0       	ldi	r30, 0x0C	; 12
 2ac:	f0 e2       	ldi	r31, 0x20	; 32
 2ae:	64 83       	std	Z+4, r22	; 0x04
 2b0:	75 83       	std	Z+5, r23	; 0x05
	rtc_data.alarm_high = time >> 16;
 2b2:	82 83       	std	Z+2, r24	; 0x02
 2b4:	93 83       	std	Z+3, r25	; 0x03
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
 2b6:	e0 e0       	ldi	r30, 0x00	; 0
 2b8:	f4 e0       	ldi	r31, 0x04	; 4
 2ba:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
 2bc:	80 fd       	sbrc	r24, 0
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
 2c0:	e0 e0       	ldi	r30, 0x00	; 0
 2c2:	f4 e0       	ldi	r31, 0x04	; 4
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
 2c8:	85 e0       	ldi	r24, 0x05	; 5
 2ca:	82 83       	std	Z+2, r24	; 0x02
 2cc:	08 95       	ret

000002ce <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
 2ce:	80 93 12 20 	sts	0x2012, r24
 2d2:	90 93 13 20 	sts	0x2013, r25
 2d6:	08 95       	ret

000002d8 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	e7 d1       	rcall	.+974    	; 0x6ac <sysclk_enable_module>
	RTC.PER = 0xffff;
 2de:	e0 e0       	ldi	r30, 0x00	; 0
 2e0:	f4 e0       	ldi	r31, 0x04	; 4
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	9f ef       	ldi	r25, 0xFF	; 255
 2e6:	82 87       	std	Z+10, r24	; 0x0a
 2e8:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
 2ea:	10 86       	std	Z+8, r1	; 0x08
 2ec:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2ee:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 2f0:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 2f2:	a6 e0       	ldi	r26, 0x06	; 6
 2f4:	b0 e2       	ldi	r27, 0x20	; 32
 2f6:	13 96       	adiw	r26, 0x03	; 3
 2f8:	8c 91       	ld	r24, X
 2fa:	13 97       	sbiw	r26, 0x03	; 3
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	13 96       	adiw	r26, 0x03	; 3
 300:	8c 93       	st	X, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 302:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
 308:	80 83       	st	Z, r24
 30a:	08 95       	ret

0000030c <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	08 b6       	in	r0, 0x38	; 56
 318:	0f 92       	push	r0
 31a:	18 be       	out	0x38, r1	; 56
 31c:	09 b6       	in	r0, 0x39	; 57
 31e:	0f 92       	push	r0
 320:	19 be       	out	0x39, r1	; 57
 322:	0b b6       	in	r0, 0x3b	; 59
 324:	0f 92       	push	r0
 326:	1b be       	out	0x3b, r1	; 59
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
 34c:	ec e0       	ldi	r30, 0x0C	; 12
 34e:	f0 e2       	ldi	r31, 0x20	; 32
 350:	80 81       	ld	r24, Z
 352:	91 81       	ldd	r25, Z+1	; 0x01
 354:	22 81       	ldd	r18, Z+2	; 0x02
 356:	33 81       	ldd	r19, Z+3	; 0x03
 358:	82 17       	cp	r24, r18
 35a:	93 07       	cpc	r25, r19
 35c:	f0 f1       	brcs	.+124    	; 0x3da <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	20 93 02 04 	sts	0x0402, r18
		if (rtc_data.callback) {
 364:	e0 91 12 20 	lds	r30, 0x2012
 368:	f0 91 13 20 	lds	r31, 0x2013
 36c:	30 97       	sbiw	r30, 0x00	; 0
 36e:	a9 f1       	breq	.+106    	; 0x3da <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
 370:	60 91 08 04 	lds	r22, 0x0408
 374:	70 91 09 04 	lds	r23, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 378:	a0 e0       	ldi	r26, 0x00	; 0
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	dc 01       	movw	r26, r24
 37e:	99 27       	eor	r25, r25
 380:	88 27       	eor	r24, r24
					| RTC.CNT;
 382:	ab 01       	movw	r20, r22
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 388:	8c 01       	movw	r16, r24
 38a:	9d 01       	movw	r18, r26
 38c:	04 2b       	or	r16, r20
 38e:	15 2b       	or	r17, r21
 390:	26 2b       	or	r18, r22
 392:	37 2b       	or	r19, r23
 394:	c9 01       	movw	r24, r18
 396:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 398:	ac e0       	ldi	r26, 0x0C	; 12
 39a:	b0 e2       	ldi	r27, 0x20	; 32
 39c:	12 96       	adiw	r26, 0x02	; 2
 39e:	0d 91       	ld	r16, X+
 3a0:	1c 91       	ld	r17, X
 3a2:	13 97       	sbiw	r26, 0x03	; 3
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	98 01       	movw	r18, r16
 3aa:	11 27       	eor	r17, r17
 3ac:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
 3ae:	14 96       	adiw	r26, 0x04	; 4
 3b0:	cd 90       	ld	r12, X+
 3b2:	dc 90       	ld	r13, X
 3b4:	15 97       	sbiw	r26, 0x05	; 5
 3b6:	e1 2c       	mov	r14, r1
 3b8:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 3ba:	0c 29       	or	r16, r12
 3bc:	1d 29       	or	r17, r13
 3be:	2e 29       	or	r18, r14
 3c0:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
 3c2:	06 17       	cp	r16, r22
 3c4:	17 07       	cpc	r17, r23
 3c6:	28 07       	cpc	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	30 f0       	brcs	.+12     	; 0x3d8 <__vector_11+0xcc>
				count = alarm + 1;
 3cc:	c9 01       	movw	r24, r18
 3ce:	b8 01       	movw	r22, r16
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	8f 4f       	sbci	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
 3d8:	19 95       	eicall
			 * is time.
			 * 
			 */
		}
	}
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	0f 90       	pop	r0
 400:	0b be       	out	0x3b, r0	; 59
 402:	0f 90       	pop	r0
 404:	09 be       	out	0x39, r0	; 57
 406:	0f 90       	pop	r0
 408:	08 be       	out	0x38, r0	; 56
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <init_power_seq>:
 */ 

#include "sequence.h"


void init_power_seq() {
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 418:	43 e0       	ldi	r20, 0x03	; 3
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	60 e8       	ldi	r22, 0x80	; 128
 41e:	80 e4       	ldi	r24, 0x40	; 64
 420:	96 e0       	ldi	r25, 0x06	; 6
 422:	50 d1       	rcall	.+672    	; 0x6c4 <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 424:	c0 e4       	ldi	r28, 0x40	; 64
 426:	d6 e0       	ldi	r29, 0x06	; 6
 428:	80 e8       	ldi	r24, 0x80	; 128
 42a:	8e 83       	std	Y+6, r24	; 0x06
 42c:	43 e0       	ldi	r20, 0x03	; 3
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	60 e2       	ldi	r22, 0x20	; 32
 432:	80 e4       	ldi	r24, 0x40	; 64
 434:	96 e0       	ldi	r25, 0x06	; 6
 436:	46 d1       	rcall	.+652    	; 0x6c4 <ioport_configure_port_pin>
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	8e 83       	std	Y+6, r24	; 0x06
 43c:	43 e0       	ldi	r20, 0x03	; 3
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	80 e4       	ldi	r24, 0x40	; 64
 444:	96 e0       	ldi	r25, 0x06	; 6
 446:	3e d1       	rcall	.+636    	; 0x6c4 <ioport_configure_port_pin>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	8e 83       	std	Y+6, r24	; 0x06
 44c:	43 e0       	ldi	r20, 0x03	; 3
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	80 e4       	ldi	r24, 0x40	; 64
 454:	96 e0       	ldi	r25, 0x06	; 6
 456:	36 d1       	rcall	.+620    	; 0x6c4 <ioport_configure_port_pin>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	8d 83       	std	Y+5, r24	; 0x05
	ioport_configure_pin(SR_LATCH, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	gpio_set_pin_low(SR_LATCH);
	ioport_configure_pin(SR_CLEAR, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	gpio_set_pin_high(SR_CLEAR);
	
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <alarm>:
 462:	e0 ec       	ldi	r30, 0xC0	; 192
 464:	f7 e0       	ldi	r31, 0x07	; 7
 466:	80 85       	ldd	r24, Z+8	; 0x08
 468:	83 fd       	sbrc	r24, 3
 46a:	03 c0       	rjmp	.+6      	; 0x472 <alarm+0x10>
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	85 83       	std	Z+5, r24	; 0x05
 470:	04 c0       	rjmp	.+8      	; 0x47a <alarm+0x18>
 472:	88 e0       	ldi	r24, 0x08	; 8
 474:	e0 ec       	ldi	r30, 0xC0	; 192
 476:	f7 e0       	ldi	r31, 0x07	; 7
 478:	86 83       	std	Z+6, r24	; 0x06
 47a:	84 e4       	ldi	r24, 0x44	; 68
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	27 df       	rcall	.-434    	; 0x2ce <rtc_set_callback>
 480:	e2 de       	rcall	.-572    	; 0x246 <rtc_get_time>
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	0c cf       	rjmp	.-488    	; 0x29e <rtc_set_alarm>
 486:	08 95       	ret

00000488 <alarm2>:
 488:	2a e0       	ldi	r18, 0x0A	; 10
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	e0 ec       	ldi	r30, 0xC0	; 192
 48e:	f7 e0       	ldi	r31, 0x07	; 7
 490:	48 e0       	ldi	r20, 0x08	; 8
 492:	80 85       	ldd	r24, Z+8	; 0x08
 494:	83 fd       	sbrc	r24, 3
 496:	02 c0       	rjmp	.+4      	; 0x49c <alarm2+0x14>
 498:	45 83       	std	Z+5, r20	; 0x05
 49a:	01 c0       	rjmp	.+2      	; 0x49e <alarm2+0x16>
 49c:	46 83       	std	Z+6, r20	; 0x06
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	8a 31       	cpi	r24, 0x1A	; 26
 4a6:	51 e4       	ldi	r21, 0x41	; 65
 4a8:	95 07       	cpc	r25, r21
 4aa:	d9 f7       	brne	.-10     	; 0x4a2 <alarm2+0x1a>
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	31 09       	sbc	r19, r1
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	71 f7       	brne	.-36     	; 0x492 <alarm2+0xa>
 4b6:	81 e3       	ldi	r24, 0x31	; 49
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	09 df       	rcall	.-494    	; 0x2ce <rtc_set_callback>
 4bc:	c4 de       	rcall	.-632    	; 0x246 <rtc_get_time>
 4be:	70 58       	subi	r23, 0x80	; 128
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	ec ce       	rjmp	.-552    	; 0x29e <rtc_set_alarm>
 4c6:	08 95       	ret

000004c8 <init_vrtc>:
 4c8:	87 e0       	ldi	r24, 0x07	; 7
 4ca:	e0 ea       	ldi	r30, 0xA0	; 160
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	82 83       	std	Z+2, r24	; 0x02
 4d0:	cd d0       	rcall	.+410    	; 0x66c <sysclk_init>
 4d2:	10 92 06 20 	sts	0x2006, r1
 4d6:	10 92 07 20 	sts	0x2007, r1
 4da:	10 92 08 20 	sts	0x2008, r1
 4de:	10 92 09 20 	sts	0x2009, r1
 4e2:	10 92 0a 20 	sts	0x200A, r1
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 0b 20 	sts	0x200B, r24
 4ec:	f5 de       	rcall	.-534    	; 0x2d8 <rtc_init>
 4ee:	78 94       	sei
 4f0:	10 92 14 20 	sts	0x2014, r1
 4f4:	10 92 15 20 	sts	0x2015, r1
 4f8:	81 e3       	ldi	r24, 0x31	; 49
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	e8 de       	rcall	.-560    	; 0x2ce <rtc_set_callback>
 4fe:	a3 de       	rcall	.-698    	; 0x246 <rtc_get_time>
 500:	70 58       	subi	r23, 0x80	; 128
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	cb ce       	rjmp	.-618    	; 0x29e <rtc_set_alarm>
 508:	08 95       	ret

0000050a <__vector_10>:
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	11 24       	eor	r1, r1
 514:	08 b6       	in	r0, 0x38	; 56
 516:	0f 92       	push	r0
 518:	18 be       	out	0x38, r1	; 56
 51a:	0b b6       	in	r0, 0x3b	; 59
 51c:	0f 92       	push	r0
 51e:	1b be       	out	0x3b, r1	; 59
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
 528:	e0 ec       	ldi	r30, 0xC0	; 192
 52a:	f7 e0       	ldi	r31, 0x07	; 7
 52c:	80 85       	ldd	r24, Z+8	; 0x08
 52e:	83 fd       	sbrc	r24, 3
 530:	03 c0       	rjmp	.+6      	; 0x538 <__vector_10+0x2e>
 532:	88 e0       	ldi	r24, 0x08	; 8
 534:	85 83       	std	Z+5, r24	; 0x05
 536:	04 c0       	rjmp	.+8      	; 0x540 <__vector_10+0x36>
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	e0 ec       	ldi	r30, 0xC0	; 192
 53c:	f7 e0       	ldi	r31, 0x07	; 7
 53e:	86 83       	std	Z+6, r24	; 0x06
 540:	ec e0       	ldi	r30, 0x0C	; 12
 542:	f0 e2       	ldi	r31, 0x20	; 32
 544:	80 81       	ld	r24, Z
 546:	91 81       	ldd	r25, Z+1	; 0x01
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	80 83       	st	Z, r24
 54c:	91 83       	std	Z+1, r25	; 0x01
 54e:	80 91 14 20 	lds	r24, 0x2014
 552:	90 91 15 20 	lds	r25, 0x2015
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	80 93 14 20 	sts	0x2014, r24
 55c:	90 93 15 20 	sts	0x2015, r25
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	08 be       	out	0x38, r0	; 56
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	1f 92       	push	r1
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	08 2f       	mov	r16, r24
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
 58a:	11 e0       	ldi	r17, 0x01	; 1
 58c:	19 83       	std	Y+1, r17	; 0x01
	spi_select_device(SSD1306_SPI, &device);
 58e:	be 01       	movw	r22, r28
 590:	6f 5f       	subi	r22, 0xFF	; 255
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	07 d1       	rcall	.+526    	; 0x7a8 <spi_select_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 59a:	10 93 06 06 	sts	0x0606, r17
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
 59e:	03 b9       	out	0x03, r16	; 3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
 5a0:	be 01       	movw	r22, r28
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	14 d1       	rcall	.+552    	; 0x7d4 <spi_deselect_device>
#endif
}
 5ac:	0f 90       	pop	r0
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
 5b8:	cf 92       	push	r12
 5ba:	df 92       	push	r13
 5bc:	ef 92       	push	r14
 5be:	ff 92       	push	r15
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	1f 92       	push	r1
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	e0 e0       	ldi	r30, 0x00	; 0
 5d0:	f6 e0       	ldi	r31, 0x06	; 6
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 5d6:	85 83       	std	Z+5, r24	; 0x05
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	89 83       	std	Y+1, r24	; 0x01
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	99 d0       	rcall	.+306    	; 0x714 <spi_master_init>
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
 5e2:	c1 2c       	mov	r12, r1
 5e4:	d1 2c       	mov	r13, r1
 5e6:	76 01       	movw	r14, r12
 5e8:	00 e0       	ldi	r16, 0x00	; 0
 5ea:	1b e1       	ldi	r17, 0x1B	; 27
 5ec:	27 eb       	ldi	r18, 0xB7	; 183
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	be 01       	movw	r22, r28
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	b7 d0       	rcall	.+366    	; 0x76c <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
 5fe:	06 9a       	sbi	0x00, 6	; 0

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
 600:	88 ea       	ldi	r24, 0xA8	; 168
 602:	bb df       	rcall	.-138    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0x1F);
 604:	8f e1       	ldi	r24, 0x1F	; 31
 606:	b9 df       	rcall	.-142    	; 0x57a <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
 608:	83 ed       	ldi	r24, 0xD3	; 211
 60a:	b7 df       	rcall	.-146    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0x00);
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	b5 df       	rcall	.-150    	; 0x57a <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
 610:	80 e4       	ldi	r24, 0x40	; 64
 612:	b3 df       	rcall	.-154    	; 0x57a <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
 614:	81 ea       	ldi	r24, 0xA1	; 161
 616:	b1 df       	rcall	.-158    	; 0x57a <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
 618:	88 ec       	ldi	r24, 0xC8	; 200
 61a:	af df       	rcall	.-162    	; 0x57a <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
 61c:	8a ed       	ldi	r24, 0xDA	; 218
 61e:	ad df       	rcall	.-166    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0x02);
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	ab df       	rcall	.-170    	; 0x57a <ssd1306_write_command>
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
 624:	81 e8       	ldi	r24, 0x81	; 129
 626:	a9 df       	rcall	.-174    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(contrast);
 628:	8f e8       	ldi	r24, 0x8F	; 143
 62a:	a7 df       	rcall	.-178    	; 0x57a <ssd1306_write_command>

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
 62c:	84 ea       	ldi	r24, 0xA4	; 164
 62e:	a5 df       	rcall	.-182    	; 0x57a <ssd1306_write_command>
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
 630:	86 ea       	ldi	r24, 0xA6	; 166
 632:	a3 df       	rcall	.-186    	; 0x57a <ssd1306_write_command>

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
 634:	85 ed       	ldi	r24, 0xD5	; 213
 636:	a1 df       	rcall	.-190    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0x80);
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	9f df       	rcall	.-194    	; 0x57a <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
 63c:	8d e8       	ldi	r24, 0x8D	; 141
 63e:	9d df       	rcall	.-198    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0x14);
 640:	84 e1       	ldi	r24, 0x14	; 20
 642:	9b df       	rcall	.-202    	; 0x57a <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
 644:	8b ed       	ldi	r24, 0xDB	; 219
 646:	99 df       	rcall	.-206    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
 648:	80 e4       	ldi	r24, 0x40	; 64
 64a:	97 df       	rcall	.-210    	; 0x57a <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
 64c:	89 ed       	ldi	r24, 0xD9	; 217
 64e:	95 df       	rcall	.-214    	; 0x57a <ssd1306_write_command>
	ssd1306_write_command(0xF1);
 650:	81 ef       	ldi	r24, 0xF1	; 241
 652:	93 df       	rcall	.-218    	; 0x57a <ssd1306_write_command>
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
 654:	8f ea       	ldi	r24, 0xAF	; 175
 656:	91 df       	rcall	.-222    	; 0x57a <ssd1306_write_command>

	ssd1306_display_on();
}
 658:	0f 90       	pop	r0
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	ff 90       	pop	r15
 664:	ef 90       	pop	r14
 666:	df 90       	pop	r13
 668:	cf 90       	pop	r12
 66a:	08 95       	ret

0000066c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	80 93 70 00 	sts	0x0070, r24
 672:	80 93 71 00 	sts	0x0071, r24
 676:	80 93 72 00 	sts	0x0072, r24
 67a:	80 93 73 00 	sts	0x0073, r24
 67e:	80 93 74 00 	sts	0x0074, r24
 682:	80 93 75 00 	sts	0x0075, r24
 686:	80 93 76 00 	sts	0x0076, r24

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
 68a:	e0 e5       	ldi	r30, 0x50	; 80
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 692:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 694:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 696:	80 81       	ld	r24, Z
 698:	88 60       	ori	r24, 0x08	; 8
 69a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 69c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 69e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 6a0:	83 ff       	sbrs	r24, 3
 6a2:	fd cf       	rjmp	.-6      	; 0x69e <sysclk_init+0x32>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
 6a4:	8b e0       	ldi	r24, 0x0B	; 11
 6a6:	80 93 43 00 	sts	0x0043, r24
 6aa:	08 95       	ret

000006ac <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 6ac:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 6ae:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 6b0:	e8 2f       	mov	r30, r24
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	e0 59       	subi	r30, 0x90	; 144
 6b6:	ff 4f       	sbci	r31, 0xFF	; 255
 6b8:	60 95       	com	r22
 6ba:	80 81       	ld	r24, Z
 6bc:	68 23       	and	r22, r24
 6be:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 6c0:	9f bf       	out	0x3f, r25	; 63
 6c2:	08 95       	ret

000006c4 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	fc 01       	movw	r30, r24
 6ca:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 6d0:	c6 2f       	mov	r28, r22
 6d2:	d0 e0       	ldi	r29, 0x00	; 0
 6d4:	de 01       	movw	r26, r28
 6d6:	02 2e       	mov	r0, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <ioport_configure_port_pin+0x1a>
 6da:	b5 95       	asr	r27
 6dc:	a7 95       	ror	r26
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <ioport_configure_port_pin+0x16>
 6e2:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 6e4:	50 83       	st	Z, r21
 6e6:	2f 5f       	subi	r18, 0xFF	; 255
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 6ec:	28 30       	cpi	r18, 0x08	; 8
 6ee:	31 05       	cpc	r19, r1
 6f0:	89 f7       	brne	.-30     	; 0x6d4 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 6f2:	40 ff       	sbrs	r20, 0
 6f4:	0a c0       	rjmp	.+20     	; 0x70a <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 6f6:	41 ff       	sbrs	r20, 1
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 6fa:	fc 01       	movw	r30, r24
 6fc:	65 83       	std	Z+5, r22	; 0x05
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 700:	fc 01       	movw	r30, r24
 702:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 704:	fc 01       	movw	r30, r24
 706:	61 83       	std	Z+1, r22	; 0x01
 708:	02 c0       	rjmp	.+4      	; 0x70e <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 70a:	fc 01       	movw	r30, r24
 70c:	62 83       	std	Z+2, r22	; 0x02
	}
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <spi_master_init>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	ec 01       	movw	r28, r24
 71e:	8c 01       	movw	r16, r24
 720:	c0 3c       	cpi	r28, 0xC0	; 192
 722:	88 e0       	ldi	r24, 0x08	; 8
 724:	d8 07       	cpc	r29, r24
 726:	21 f4       	brne	.+8      	; 0x730 <spi_master_init+0x1c>
 728:	68 e0       	ldi	r22, 0x08	; 8
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	bf df       	rcall	.-130    	; 0x6ac <sysclk_enable_module>
 72e:	10 c0       	rjmp	.+32     	; 0x750 <spi_master_init+0x3c>
 730:	c0 3c       	cpi	r28, 0xC0	; 192
 732:	89 e0       	ldi	r24, 0x09	; 9
 734:	d8 07       	cpc	r29, r24
 736:	21 f4       	brne	.+8      	; 0x740 <spi_master_init+0x2c>
 738:	68 e0       	ldi	r22, 0x08	; 8
 73a:	84 e0       	ldi	r24, 0x04	; 4
 73c:	b7 df       	rcall	.-146    	; 0x6ac <sysclk_enable_module>
 73e:	0e c0       	rjmp	.+28     	; 0x75c <spi_master_init+0x48>
 740:	c0 3c       	cpi	r28, 0xC0	; 192
 742:	8a e0       	ldi	r24, 0x0A	; 10
 744:	d8 07       	cpc	r29, r24
 746:	21 f4       	brne	.+8      	; 0x750 <spi_master_init+0x3c>
 748:	68 e0       	ldi	r22, 0x08	; 8
 74a:	85 e0       	ldi	r24, 0x05	; 5
 74c:	af df       	rcall	.-162    	; 0x6ac <sysclk_enable_module>
 74e:	06 c0       	rjmp	.+12     	; 0x75c <spi_master_init+0x48>
 750:	00 3c       	cpi	r16, 0xC0	; 192
 752:	1b 40       	sbci	r17, 0x0B	; 11
 754:	19 f4       	brne	.+6      	; 0x75c <spi_master_init+0x48>
 756:	68 e0       	ldi	r22, 0x08	; 8
 758:	86 e0       	ldi	r24, 0x06	; 6
 75a:	a8 df       	rcall	.-176    	; 0x6ac <sysclk_enable_module>
 75c:	88 81       	ld	r24, Y
 75e:	80 61       	ori	r24, 0x10	; 16
 760:	88 83       	st	Y, r24
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <spi_master_setup_device>:
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	7c 01       	movw	r14, r24
 778:	c4 2f       	mov	r28, r20
 77a:	b9 01       	movw	r22, r18
 77c:	a8 01       	movw	r20, r16
 77e:	00 e8       	ldi	r16, 0x80	; 128
 780:	14 e8       	ldi	r17, 0x84	; 132
 782:	2e e1       	ldi	r18, 0x1E	; 30
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	49 d0       	rcall	.+146    	; 0x81a <spi_xmega_set_baud_div>
 788:	88 23       	and	r24, r24
 78a:	44 f0       	brlt	.+16     	; 0x79c <spi_master_setup_device+0x30>
 78c:	f7 01       	movw	r30, r14
 78e:	90 81       	ld	r25, Z
 790:	cc 0f       	add	r28, r28
 792:	cc 0f       	add	r28, r28
 794:	cc 70       	andi	r28, 0x0C	; 12
 796:	93 7f       	andi	r25, 0xF3	; 243
 798:	c9 2b       	or	r28, r25
 79a:	c0 83       	st	Z, r28
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	08 95       	ret

000007a8 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
 7a8:	fb 01       	movw	r30, r22
 7aa:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
 7ac:	e8 2f       	mov	r30, r24
 7ae:	e6 95       	lsr	r30
 7b0:	e6 95       	lsr	r30
 7b2:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
 7b4:	40 e2       	ldi	r20, 0x20	; 32
 7b6:	e4 9f       	mul	r30, r20
 7b8:	f0 01       	movw	r30, r0
 7ba:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 7bc:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 7be:	87 70       	andi	r24, 0x07	; 7
 7c0:	21 e0       	ldi	r18, 0x01	; 1
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	a9 01       	movw	r20, r18
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <spi_select_device+0x24>
 7c8:	44 0f       	add	r20, r20
 7ca:	55 1f       	adc	r21, r21
 7cc:	8a 95       	dec	r24
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 7d0:	46 83       	std	Z+6, r20	; 0x06
 7d2:	08 95       	ret

000007d4 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
 7d4:	fb 01       	movw	r30, r22
 7d6:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
 7d8:	e8 2f       	mov	r30, r24
 7da:	e6 95       	lsr	r30
 7dc:	e6 95       	lsr	r30
 7de:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
 7e0:	40 e2       	ldi	r20, 0x20	; 32
 7e2:	e4 9f       	mul	r30, r20
 7e4:	f0 01       	movw	r30, r0
 7e6:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 7e8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 7ea:	87 70       	andi	r24, 0x07	; 7
 7ec:	21 e0       	ldi	r18, 0x01	; 1
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	a9 01       	movw	r20, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <spi_deselect_device+0x24>
 7f4:	44 0f       	add	r20, r20
 7f6:	55 1f       	adc	r21, r21
 7f8:	8a 95       	dec	r24
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 7fc:	45 83       	std	Z+5, r20	; 0x05
 7fe:	08 95       	ret

00000800 <board_init>:
 800:	43 e0       	ldi	r20, 0x03	; 3
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	68 e0       	ldi	r22, 0x08	; 8
 806:	80 ec       	ldi	r24, 0xC0	; 192
 808:	97 e0       	ldi	r25, 0x07	; 7
 80a:	5c df       	rcall	.-328    	; 0x6c4 <ioport_configure_port_pin>
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	58 e1       	ldi	r21, 0x18	; 24
 810:	64 e0       	ldi	r22, 0x04	; 4
 812:	80 ec       	ldi	r24, 0xC0	; 192
 814:	97 e0       	ldi	r25, 0x07	; 7
 816:	56 cf       	rjmp	.-340    	; 0x6c4 <ioport_configure_port_pin>
 818:	08 95       	ret

0000081a <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	ec 01       	movw	r28, r24
 82c:	6a 01       	movw	r12, r20
 82e:	7b 01       	movw	r14, r22
 830:	db 01       	movw	r26, r22
 832:	ca 01       	movw	r24, r20
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	a1 09       	sbc	r26, r1
 838:	b1 09       	sbc	r27, r1

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
 83a:	bc 01       	movw	r22, r24
 83c:	cd 01       	movw	r24, r26
 83e:	60 0f       	add	r22, r16
 840:	71 1f       	adc	r23, r17
 842:	82 1f       	adc	r24, r18
 844:	93 1f       	adc	r25, r19
 846:	a7 01       	movw	r20, r14
 848:	96 01       	movw	r18, r12
 84a:	58 d0       	rcall	.+176    	; 0x8fc <__udivmodsi4>

	if (divisor > 128) {
 84c:	21 38       	cpi	r18, 0x81	; 129
 84e:	31 05       	cpc	r19, r1
 850:	41 05       	cpc	r20, r1
 852:	51 05       	cpc	r21, r1
 854:	f8 f4       	brcc	.+62     	; 0x894 <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
 856:	21 34       	cpi	r18, 0x41	; 65
 858:	60 f4       	brcc	.+24     	; 0x872 <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
 85a:	21 32       	cpi	r18, 0x21	; 33
 85c:	60 f4       	brcc	.+24     	; 0x876 <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
 85e:	21 31       	cpi	r18, 0x11	; 17
 860:	60 f4       	brcc	.+24     	; 0x87a <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
 862:	29 30       	cpi	r18, 0x09	; 9
 864:	60 f4       	brcc	.+24     	; 0x87e <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
 866:	25 30       	cpi	r18, 0x05	; 5
 868:	60 f4       	brcc	.+24     	; 0x882 <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
 86a:	23 30       	cpi	r18, 0x03	; 3
 86c:	60 f4       	brcc	.+24     	; 0x886 <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
 86e:	80 e8       	ldi	r24, 0x80	; 128
 870:	0b c0       	rjmp	.+22     	; 0x888 <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
 872:	83 e0       	ldi	r24, 0x03	; 3
 874:	09 c0       	rjmp	.+18     	; 0x888 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	07 c0       	rjmp	.+14     	; 0x888 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
 87a:	82 e8       	ldi	r24, 0x82	; 130
 87c:	05 c0       	rjmp	.+10     	; 0x888 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	03 c0       	rjmp	.+6      	; 0x888 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
 882:	81 e8       	ldi	r24, 0x81	; 129
 884:	01 c0       	rjmp	.+2      	; 0x888 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
 886:	80 e0       	ldi	r24, 0x00	; 0
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
 888:	98 81       	ld	r25, Y
 88a:	9c 77       	andi	r25, 0x7C	; 124
 88c:	98 2b       	or	r25, r24
 88e:	98 83       	st	Y, r25

	return 1;
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	01 c0       	rjmp	.+2      	; 0x896 <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
 894:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	08 95       	ret

000008a8 <main>:
uint32_t y = 0;

int main (void)
{
	//board-specific
	board_init();
 8a8:	ab df       	rcall	.-170    	; 0x800 <board_init>
	ioport_init();
	ssd1306_init();
 8aa:	86 de       	rcall	.-756    	; 0x5b8 <ssd1306_init>
	
	//v2x power sequencing
	init_power_seq();
 8ac:	b3 dd       	rcall	.-1178   	; 0x414 <init_power_seq>
	
	//v2x real time clock
	init_vrtc();
 8ae:	0c de       	rcall	.-1000   	; 0x4c8 <init_vrtc>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 8b0:	26 e0       	ldi	r18, 0x06	; 6
 8b2:	30 e2       	ldi	r19, 0x20	; 32
 8b4:	47 e0       	ldi	r20, 0x07	; 7
 8b6:	50 e2       	ldi	r21, 0x20	; 32
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
 8b8:	c8 e4       	ldi	r28, 0x48	; 72
 8ba:	d0 e0       	ldi	r29, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
 8bc:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 8be:	f9 01       	movw	r30, r18
 8c0:	80 81       	ld	r24, Z
 8c2:	81 11       	cpse	r24, r1
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <main+0x2e>
 8c6:	da 01       	movw	r26, r20
 8c8:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 8ca:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 8cc:	8d 91       	ld	r24, X+
 8ce:	88 23       	and	r24, r24
 8d0:	e1 f3       	breq	.-8      	; 0x8ca <main+0x22>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
 8d2:	e1 11       	cpse	r30, r1
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <main+0x32>
		cpu_irq_enable();
 8d6:	78 94       	sei
 8d8:	f1 cf       	rjmp	.-30     	; 0x8bc <main+0x14>
 8da:	88 81       	ld	r24, Y

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	e1 50       	subi	r30, 0x01	; 1
 8e0:	f0 4e       	sbci	r31, 0xE0	; 224
 8e2:	81 7f       	andi	r24, 0xF1	; 241
 8e4:	90 81       	ld	r25, Z
 8e6:	89 2b       	or	r24, r25
 8e8:	88 83       	st	Y, r24
	sleep_enable();
 8ea:	88 81       	ld	r24, Y
 8ec:	81 60       	ori	r24, 0x01	; 1
 8ee:	88 83       	st	Y, r24

	cpu_irq_enable();
 8f0:	78 94       	sei
	sleep_enter();
 8f2:	88 95       	sleep

	sleep_disable();
 8f4:	88 81       	ld	r24, Y
 8f6:	8e 7f       	andi	r24, 0xFE	; 254
 8f8:	88 83       	st	Y, r24
 8fa:	e0 cf       	rjmp	.-64     	; 0x8bc <main+0x14>

000008fc <__udivmodsi4>:
 8fc:	a1 e2       	ldi	r26, 0x21	; 33
 8fe:	1a 2e       	mov	r1, r26
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	fd 01       	movw	r30, r26
 906:	0d c0       	rjmp	.+26     	; 0x922 <__udivmodsi4_ep>

00000908 <__udivmodsi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	ee 1f       	adc	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	a2 17       	cp	r26, r18
 912:	b3 07       	cpc	r27, r19
 914:	e4 07       	cpc	r30, r20
 916:	f5 07       	cpc	r31, r21
 918:	20 f0       	brcs	.+8      	; 0x922 <__udivmodsi4_ep>
 91a:	a2 1b       	sub	r26, r18
 91c:	b3 0b       	sbc	r27, r19
 91e:	e4 0b       	sbc	r30, r20
 920:	f5 0b       	sbc	r31, r21

00000922 <__udivmodsi4_ep>:
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a 94       	dec	r1
 92c:	69 f7       	brne	.-38     	; 0x908 <__udivmodsi4_loop>
 92e:	60 95       	com	r22
 930:	70 95       	com	r23
 932:	80 95       	com	r24
 934:	90 95       	com	r25
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	bd 01       	movw	r22, r26
 93c:	cf 01       	movw	r24, r30
 93e:	08 95       	ret

00000940 <_exit>:
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
