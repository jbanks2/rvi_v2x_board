
V2X_Sequencer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00802000  00802000  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a26  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001087  00000000  00000000  00004672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e4  00000000  00000000  000056f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00006de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000163b  00000000  00000000  00007354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f36  00000000  00000000  0000898f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000098c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	c2 c2       	rjmp	.+1412   	; 0x59e <__vector_6>
  1a:	00 00       	nop
  1c:	e4 c2       	rjmp	.+1480   	; 0x5e6 <__vector_7>
  1e:	00 00       	nop
  20:	06 c3       	rjmp	.+1548   	; 0x62e <__vector_8>
  22:	00 00       	nop
  24:	28 c3       	rjmp	.+1616   	; 0x676 <__vector_9>
  26:	00 00       	nop
  28:	4a c3       	rjmp	.+1684   	; 0x6be <__vector_10>
  2a:	00 00       	nop
  2c:	61 c3       	rjmp	.+1730   	; 0x6f0 <__vector_11>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c1       	rjmp	.+812    	; 0x362 <__vector_13>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	77 c1       	rjmp	.+750    	; 0x3a8 <__vector_46>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	d7 e2       	ldi	r29, 0x27	; 39
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	ee e6       	ldi	r30, 0x6E	; 110
 210:	f9 e0       	ldi	r31, 0x09	; 9
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 30       	cpi	r26, 0x00	; 0
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	ad 31       	cpi	r26, 0x1D	; 29
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	99 d3       	rcall	.+1842   	; 0x962 <main>
 230:	9c c3       	rjmp	.+1848   	; 0x96a <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 238:	e0 91 00 20 	lds	r30, 0x2000
 23c:	f0 91 01 20 	lds	r31, 0x2001
 240:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 242:	83 ff       	sbrs	r24, 3
 244:	08 c0       	rjmp	.+16     	; 0x256 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 246:	88 60       	ori	r24, 0x08	; 8
 248:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 24e:	86 ef       	ldi	r24, 0xF6	; 246
 250:	80 93 0a 20 	sts	0x200A, r24
 254:	83 c0       	rjmp	.+262    	; 0x35c <twim_interrupt_handler+0x128>
 256:	98 2f       	mov	r25, r24
 258:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 25a:	31 f0       	breq	.+12     	; 0x268 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	80 93 0a 20 	sts	0x200A, r24
 266:	7a c0       	rjmp	.+244    	; 0x35c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 268:	86 ff       	sbrs	r24, 6
 26a:	43 c0       	rjmp	.+134    	; 0x2f2 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e2       	ldi	r29, 0x20	; 32
 270:	aa 81       	ldd	r26, Y+2	; 0x02
 272:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	9d 81       	ldd	r25, Y+5	; 0x05
 278:	14 96       	adiw	r26, 0x04	; 4
 27a:	2d 91       	ld	r18, X+
 27c:	3c 91       	ld	r19, X
 27e:	15 97       	sbiw	r26, 0x05	; 5
 280:	82 17       	cp	r24, r18
 282:	93 07       	cpc	r25, r19
 284:	6c f4       	brge	.+26     	; 0x2a0 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 286:	9c 01       	movw	r18, r24
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
 28c:	20 93 04 20 	sts	0x2004, r18
 290:	30 93 05 20 	sts	0x2005, r19
 294:	a8 0f       	add	r26, r24
 296:	b9 1f       	adc	r27, r25
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	8c 91       	ld	r24, X
 29c:	87 83       	std	Z+7, r24	; 0x07
 29e:	5e c0       	rjmp	.+188    	; 0x35c <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
 2a0:	80 91 06 20 	lds	r24, 0x2006
 2a4:	90 91 07 20 	lds	r25, 0x2007
 2a8:	18 96       	adiw	r26, 0x08	; 8
 2aa:	2d 91       	ld	r18, X+
 2ac:	3c 91       	ld	r19, X
 2ae:	19 97       	sbiw	r26, 0x09	; 9
 2b0:	82 17       	cp	r24, r18
 2b2:	93 07       	cpc	r25, r19
 2b4:	c8 f4       	brcc	.+50     	; 0x2e8 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
 2b6:	20 91 08 20 	lds	r18, 0x2008
 2ba:	22 23       	and	r18, r18
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 2be:	86 81       	ldd	r24, Z+6	; 0x06
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	86 83       	std	Z+6, r24	; 0x06
 2c4:	4b c0       	rjmp	.+150    	; 0x35c <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
 2c6:	16 96       	adiw	r26, 0x06	; 6
 2c8:	2d 91       	ld	r18, X+
 2ca:	3c 91       	ld	r19, X
 2cc:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 2ce:	ac 01       	movw	r20, r24
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	40 93 06 20 	sts	0x2006, r20
 2d8:	50 93 07 20 	sts	0x2007, r21
 2dc:	d9 01       	movw	r26, r18
 2de:	a8 0f       	add	r26, r24
 2e0:	b9 1f       	adc	r27, r25
 2e2:	8c 91       	ld	r24, X
 2e4:	87 83       	std	Z+7, r24	; 0x07
 2e6:	3a c0       	rjmp	.+116    	; 0x35c <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 2ec:	10 92 0a 20 	sts	0x200A, r1
 2f0:	35 c0       	rjmp	.+106    	; 0x35c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 2f2:	88 23       	and	r24, r24
 2f4:	84 f5       	brge	.+96     	; 0x356 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 2f6:	a0 e0       	ldi	r26, 0x00	; 0
 2f8:	b0 e2       	ldi	r27, 0x20	; 32
 2fa:	12 96       	adiw	r26, 0x02	; 2
 2fc:	cd 91       	ld	r28, X+
 2fe:	dc 91       	ld	r29, X
 300:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 302:	16 96       	adiw	r26, 0x06	; 6
 304:	8d 91       	ld	r24, X+
 306:	9c 91       	ld	r25, X
 308:	17 97       	sbiw	r26, 0x07	; 7
 30a:	28 85       	ldd	r18, Y+8	; 0x08
 30c:	39 85       	ldd	r19, Y+9	; 0x09
 30e:	82 17       	cp	r24, r18
 310:	93 07       	cpc	r25, r19
 312:	d8 f4       	brcc	.+54     	; 0x34a <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
 314:	6e 81       	ldd	r22, Y+6	; 0x06
 316:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 318:	9c 01       	movw	r18, r24
 31a:	2f 5f       	subi	r18, 0xFF	; 255
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	20 93 06 20 	sts	0x2006, r18
 322:	30 93 07 20 	sts	0x2007, r19
 326:	47 81       	ldd	r20, Z+7	; 0x07
 328:	db 01       	movw	r26, r22
 32a:	a8 0f       	add	r26, r24
 32c:	b9 1f       	adc	r27, r25
 32e:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 330:	88 85       	ldd	r24, Y+8	; 0x08
 332:	99 85       	ldd	r25, Y+9	; 0x09
 334:	28 17       	cp	r18, r24
 336:	39 07       	cpc	r19, r25
 338:	18 f4       	brcc	.+6      	; 0x340 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	83 83       	std	Z+3, r24	; 0x03
 33e:	0e c0       	rjmp	.+28     	; 0x35c <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 340:	87 e0       	ldi	r24, 0x07	; 7
 342:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 344:	10 92 0a 20 	sts	0x200A, r1
 348:	09 c0       	rjmp	.+18     	; 0x35c <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 34e:	89 ef       	ldi	r24, 0xF9	; 249
 350:	80 93 0a 20 	sts	0x200A, r24
 354:	03 c0       	rjmp	.+6      	; 0x35c <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 356:	8b ef       	ldi	r24, 0xFB	; 251
 358:	80 93 0a 20 	sts	0x200A, r24
	}
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
 384:	57 df       	rcall	.-338    	; 0x234 <twim_interrupt_handler>
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
 3ca:	34 df       	rcall	.-408    	; 0x234 <twim_interrupt_handler>
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <shiftRegisterLatch>:
void turn_off(uint16_t pin_name_off)
{
	//uint16_t compare_matrix = pin_name_off ^ 0xffff;
	//state = compare_matrix & state;
	state &= pin_name_off; //& state;
	bits_To_Shift_Register(state);
 3ee:	e0 e4       	ldi	r30, 0x40	; 64
 3f0:	f6 e0       	ldi	r31, 0x06	; 6
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	86 83       	std	Z+6, r24	; 0x06
 3f6:	85 83       	std	Z+5, r24	; 0x05
 3f8:	86 83       	std	Z+6, r24	; 0x06
 3fa:	08 95       	ret

000003fc <shiftRegisterClear>:
 3fc:	e0 e4       	ldi	r30, 0x40	; 64
 3fe:	f6 e0       	ldi	r31, 0x06	; 6
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	85 83       	std	Z+5, r24	; 0x05
 404:	86 83       	std	Z+6, r24	; 0x06
 406:	85 83       	std	Z+5, r24	; 0x05
 408:	08 95       	ret

0000040a <bits_To_Shift_Register>:
 40a:	bc 01       	movw	r22, r24
 40c:	80 93 0b 20 	sts	0x200B, r24
 410:	90 93 0c 20 	sts	0x200C, r25
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	e0 e4       	ldi	r30, 0x40	; 64
 41a:	f6 e0       	ldi	r31, 0x06	; 6
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	90 e8       	ldi	r25, 0x80	; 128
 420:	ab 01       	movw	r20, r22
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <bits_To_Shift_Register+0x20>
 426:	56 95       	lsr	r21
 428:	47 95       	ror	r20
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <bits_To_Shift_Register+0x1c>
 42e:	40 ff       	sbrs	r20, 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <bits_To_Shift_Register+0x2c>
 432:	85 83       	std	Z+5, r24	; 0x05
 434:	01 c0       	rjmp	.+2      	; 0x438 <bits_To_Shift_Register+0x2e>
 436:	86 83       	std	Z+6, r24	; 0x06
 438:	95 83       	std	Z+5, r25	; 0x05
 43a:	96 83       	std	Z+6, r25	; 0x06
 43c:	2f 5f       	subi	r18, 0xFF	; 255
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	20 31       	cpi	r18, 0x10	; 16
 442:	31 05       	cpc	r19, r1
 444:	69 f7       	brne	.-38     	; 0x420 <bits_To_Shift_Register+0x16>
 446:	d3 cf       	rjmp	.-90     	; 0x3ee <shiftRegisterLatch>
 448:	08 95       	ret

0000044a <shiftRegisterInit>:
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e8       	ldi	r25, 0x80	; 128
 44e:	80 93 0b 20 	sts	0x200B, r24
 452:	90 93 0c 20 	sts	0x200C, r25
 456:	d2 df       	rcall	.-92     	; 0x3fc <shiftRegisterClear>
 458:	ca df       	rcall	.-108    	; 0x3ee <shiftRegisterLatch>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e8       	ldi	r25, 0x80	; 128
 45e:	d5 cf       	rjmp	.-86     	; 0x40a <bits_To_Shift_Register>
 460:	08 95       	ret

00000462 <toggleChargePump>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 462:	e0 e0       	ldi	r30, 0x00	; 0
 464:	f6 e0       	ldi	r31, 0x06	; 6
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 46a:	85 83       	std	Z+5, r24	; 0x05
 46c:	08 95       	ret

0000046e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	fc 01       	movw	r30, r24
 474:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 47a:	c6 2f       	mov	r28, r22
 47c:	d0 e0       	ldi	r29, 0x00	; 0
 47e:	de 01       	movw	r26, r28
 480:	02 2e       	mov	r0, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <ioport_configure_port_pin+0x1a>
 484:	b5 95       	asr	r27
 486:	a7 95       	ror	r26
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <ioport_configure_port_pin+0x16>
 48c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 48e:	50 83       	st	Z, r21
 490:	2f 5f       	subi	r18, 0xFF	; 255
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 496:	28 30       	cpi	r18, 0x08	; 8
 498:	31 05       	cpc	r19, r1
 49a:	89 f7       	brne	.-30     	; 0x47e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 49c:	40 ff       	sbrs	r20, 0
 49e:	0a c0       	rjmp	.+20     	; 0x4b4 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 4a0:	41 ff       	sbrs	r20, 1
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 4a4:	fc 01       	movw	r30, r24
 4a6:	65 83       	std	Z+5, r22	; 0x05
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 4aa:	fc 01       	movw	r30, r24
 4ac:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 4ae:	fc 01       	movw	r30, r24
 4b0:	61 83       	std	Z+1, r22	; 0x01
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 4b4:	fc 01       	movw	r30, r24
 4b6:	62 83       	std	Z+2, r22	; 0x02
	}
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	80 93 70 00 	sts	0x0070, r24
 4c4:	80 93 71 00 	sts	0x0071, r24
 4c8:	80 93 72 00 	sts	0x0072, r24
 4cc:	80 93 73 00 	sts	0x0073, r24
 4d0:	80 93 74 00 	sts	0x0074, r24
 4d4:	80 93 75 00 	sts	0x0075, r24
 4d8:	80 93 76 00 	sts	0x0076, r24
 4dc:	08 95       	ret

000004de <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	f9 01       	movw	r30, r18
 4e8:	71 96       	adiw	r30, 0x11	; 17
 4ea:	e2 95       	swap	r30
 4ec:	f2 95       	swap	r31
 4ee:	f0 7f       	andi	r31, 0xF0	; 240
 4f0:	fe 27       	eor	r31, r30
 4f2:	e0 7f       	andi	r30, 0xF0	; 240
 4f4:	fe 27       	eor	r31, r30
 4f6:	a0 e0       	ldi	r26, 0x00	; 0
 4f8:	b1 e0       	ldi	r27, 0x01	; 1
 4fa:	14 96       	adiw	r26, 0x04	; 4
 4fc:	9c 91       	ld	r25, X
 4fe:	14 97       	sbiw	r26, 0x04	; 4
 500:	13 96       	adiw	r26, 0x03	; 3
 502:	6c 91       	ld	r22, X
 504:	d9 01       	movw	r26, r18
 506:	14 96       	adiw	r26, 0x04	; 4
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	ea 01       	movw	r28, r20
 50e:	0a 2e       	mov	r0, r26
 510:	02 c0       	rjmp	.+4      	; 0x516 <dma_interrupt+0x38>
 512:	cc 0f       	add	r28, r28
 514:	dd 1f       	adc	r29, r29
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <dma_interrupt+0x34>
 51a:	08 2e       	mov	r0, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <dma_interrupt+0x44>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <dma_interrupt+0x40>
 526:	4c 2b       	or	r20, r28
 528:	64 23       	and	r22, r20
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	eb 01       	movw	r28, r22
 52e:	0a 2e       	mov	r0, r26
 530:	02 c0       	rjmp	.+4      	; 0x536 <dma_interrupt+0x58>
 532:	d5 95       	asr	r29
 534:	c7 95       	ror	r28
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <dma_interrupt+0x54>
 53a:	c0 fd       	sbrc	r28, 0
 53c:	1a c0       	rjmp	.+52     	; 0x572 <dma_interrupt+0x94>
 53e:	08 2e       	mov	r0, r24
 540:	02 c0       	rjmp	.+4      	; 0x546 <dma_interrupt+0x68>
 542:	75 95       	asr	r23
 544:	67 95       	ror	r22
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <dma_interrupt+0x64>
 54a:	60 fd       	sbrc	r22, 0
 54c:	14 c0       	rjmp	.+40     	; 0x576 <dma_interrupt+0x98>
 54e:	49 23       	and	r20, r25
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	ba 01       	movw	r22, r20
 554:	02 c0       	rjmp	.+4      	; 0x55a <dma_interrupt+0x7c>
 556:	75 95       	asr	r23
 558:	67 95       	ror	r22
 55a:	aa 95       	dec	r26
 55c:	e2 f7       	brpl	.-8      	; 0x556 <dma_interrupt+0x78>
 55e:	60 fd       	sbrc	r22, 0
 560:	0c c0       	rjmp	.+24     	; 0x57a <dma_interrupt+0x9c>
 562:	02 c0       	rjmp	.+4      	; 0x568 <dma_interrupt+0x8a>
 564:	55 95       	asr	r21
 566:	47 95       	ror	r20
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <dma_interrupt+0x86>
 56c:	84 2f       	mov	r24, r20
 56e:	81 70       	andi	r24, 0x01	; 1
 570:	05 c0       	rjmp	.+10     	; 0x57c <dma_interrupt+0x9e>
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	03 c0       	rjmp	.+6      	; 0x57c <dma_interrupt+0x9e>
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	01 c0       	rjmp	.+2      	; 0x57c <dma_interrupt+0x9e>
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	91 81       	ldd	r25, Z+1	; 0x01
 57e:	90 63       	ori	r25, 0x30	; 48
 580:	91 83       	std	Z+1, r25	; 0x01
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	f9 01       	movw	r30, r18
 588:	e3 5f       	subi	r30, 0xF3	; 243
 58a:	ff 4d       	sbci	r31, 0xDF	; 223
 58c:	01 90       	ld	r0, Z+
 58e:	f0 81       	ld	r31, Z
 590:	e0 2d       	mov	r30, r0
 592:	30 97       	sbiw	r30, 0x00	; 0
 594:	09 f0       	breq	.+2      	; 0x598 <dma_interrupt+0xba>
 596:	09 95       	icall
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	dma_interrupt(0);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	8d df       	rcall	.-230    	; 0x4de <dma_interrupt>
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	dma_interrupt(1);
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	69 df       	rcall	.-302    	; 0x4de <dma_interrupt>
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	3f 93       	push	r19
 63c:	4f 93       	push	r20
 63e:	5f 93       	push	r21
 640:	6f 93       	push	r22
 642:	7f 93       	push	r23
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
	dma_interrupt(2);
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	45 df       	rcall	.-374    	; 0x4de <dma_interrupt>
}
 654:	ff 91       	pop	r31
 656:	ef 91       	pop	r30
 658:	bf 91       	pop	r27
 65a:	af 91       	pop	r26
 65c:	9f 91       	pop	r25
 65e:	8f 91       	pop	r24
 660:	7f 91       	pop	r23
 662:	6f 91       	pop	r22
 664:	5f 91       	pop	r21
 666:	4f 91       	pop	r20
 668:	3f 91       	pop	r19
 66a:	2f 91       	pop	r18
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	2f 93       	push	r18
 682:	3f 93       	push	r19
 684:	4f 93       	push	r20
 686:	5f 93       	push	r21
 688:	6f 93       	push	r22
 68a:	7f 93       	push	r23
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	af 93       	push	r26
 692:	bf 93       	push	r27
 694:	ef 93       	push	r30
 696:	ff 93       	push	r31
	dma_interrupt(3);
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	21 df       	rcall	.-446    	; 0x4de <dma_interrupt>
}
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	bf 91       	pop	r27
 6a2:	af 91       	pop	r26
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	7f 91       	pop	r23
 6aa:	6f 91       	pop	r22
 6ac:	5f 91       	pop	r21
 6ae:	4f 91       	pop	r20
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31
	rtc_data.counter_high++;
 6d0:	e5 e1       	ldi	r30, 0x15	; 21
 6d2:	f0 e2       	ldi	r31, 0x20	; 32
 6d4:	80 81       	ld	r24, Z
 6d6:	91 81       	ldd	r25, Z+1	; 0x01
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	80 83       	st	Z, r24
 6dc:	91 83       	std	Z+1, r25	; 0x01
}
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	cf 92       	push	r12
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	2f 93       	push	r18
 708:	3f 93       	push	r19
 70a:	4f 93       	push	r20
 70c:	5f 93       	push	r21
 70e:	6f 93       	push	r22
 710:	7f 93       	push	r23
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	af 93       	push	r26
 718:	bf 93       	push	r27
 71a:	ef 93       	push	r30
 71c:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
 71e:	e5 e1       	ldi	r30, 0x15	; 21
 720:	f0 e2       	ldi	r31, 0x20	; 32
 722:	80 81       	ld	r24, Z
 724:	91 81       	ldd	r25, Z+1	; 0x01
 726:	22 81       	ldd	r18, Z+2	; 0x02
 728:	33 81       	ldd	r19, Z+3	; 0x03
 72a:	82 17       	cp	r24, r18
 72c:	93 07       	cpc	r25, r19
 72e:	f0 f1       	brcs	.+124    	; 0x7ac <__vector_11+0xbc>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	20 93 02 04 	sts	0x0402, r18
		if (rtc_data.callback) {
 736:	e0 91 1b 20 	lds	r30, 0x201B
 73a:	f0 91 1c 20 	lds	r31, 0x201C
 73e:	30 97       	sbiw	r30, 0x00	; 0
 740:	a9 f1       	breq	.+106    	; 0x7ac <__vector_11+0xbc>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
 742:	60 91 08 04 	lds	r22, 0x0408
 746:	70 91 09 04 	lds	r23, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 74a:	a0 e0       	ldi	r26, 0x00	; 0
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	dc 01       	movw	r26, r24
 750:	99 27       	eor	r25, r25
 752:	88 27       	eor	r24, r24
					| RTC.CNT;
 754:	ab 01       	movw	r20, r22
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 75a:	8c 01       	movw	r16, r24
 75c:	9d 01       	movw	r18, r26
 75e:	04 2b       	or	r16, r20
 760:	15 2b       	or	r17, r21
 762:	26 2b       	or	r18, r22
 764:	37 2b       	or	r19, r23
 766:	c9 01       	movw	r24, r18
 768:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 76a:	a5 e1       	ldi	r26, 0x15	; 21
 76c:	b0 e2       	ldi	r27, 0x20	; 32
 76e:	12 96       	adiw	r26, 0x02	; 2
 770:	0d 91       	ld	r16, X+
 772:	1c 91       	ld	r17, X
 774:	13 97       	sbiw	r26, 0x03	; 3
 776:	20 e0       	ldi	r18, 0x00	; 0
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	98 01       	movw	r18, r16
 77c:	11 27       	eor	r17, r17
 77e:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
 780:	14 96       	adiw	r26, 0x04	; 4
 782:	cd 90       	ld	r12, X+
 784:	dc 90       	ld	r13, X
 786:	15 97       	sbiw	r26, 0x05	; 5
 788:	e1 2c       	mov	r14, r1
 78a:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 78c:	0c 29       	or	r16, r12
 78e:	1d 29       	or	r17, r13
 790:	2e 29       	or	r18, r14
 792:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
 794:	06 17       	cp	r16, r22
 796:	17 07       	cpc	r17, r23
 798:	28 07       	cpc	r18, r24
 79a:	39 07       	cpc	r19, r25
 79c:	30 f0       	brcs	.+12     	; 0x7aa <__vector_11+0xba>
				count = alarm + 1;
 79e:	c9 01       	movw	r24, r18
 7a0:	b8 01       	movw	r22, r16
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
 7aa:	09 95       	icall
		}
	}
}
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <pinInit>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 7da:	40 e0       	ldi	r20, 0x00	; 0
 7dc:	58 e1       	ldi	r21, 0x18	; 24
 7de:	64 e0       	ldi	r22, 0x04	; 4
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	96 e0       	ldi	r25, 0x06	; 6
 7e4:	44 de       	rcall	.-888    	; 0x46e <ioport_configure_port_pin>
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	58 e1       	ldi	r21, 0x18	; 24
 7ea:	68 e0       	ldi	r22, 0x08	; 8
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	96 e0       	ldi	r25, 0x06	; 6
 7f0:	3e de       	rcall	.-900    	; 0x46e <ioport_configure_port_pin>
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	60 e1       	ldi	r22, 0x10	; 16
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	96 e0       	ldi	r25, 0x06	; 6
 7fc:	38 de       	rcall	.-912    	; 0x46e <ioport_configure_port_pin>
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	60 e2       	ldi	r22, 0x20	; 32
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	96 e0       	ldi	r25, 0x06	; 6
 808:	32 de       	rcall	.-924    	; 0x46e <ioport_configure_port_pin>
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	62 e0       	ldi	r22, 0x02	; 2
 810:	80 e2       	ldi	r24, 0x20	; 32
 812:	96 e0       	ldi	r25, 0x06	; 6
 814:	2c de       	rcall	.-936    	; 0x46e <ioport_configure_port_pin>
 816:	43 e0       	ldi	r20, 0x03	; 3
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	61 e0       	ldi	r22, 0x01	; 1
 81c:	80 e4       	ldi	r24, 0x40	; 64
 81e:	96 e0       	ldi	r25, 0x06	; 6
 820:	26 de       	rcall	.-948    	; 0x46e <ioport_configure_port_pin>
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	62 e0       	ldi	r22, 0x02	; 2
 828:	80 e4       	ldi	r24, 0x40	; 64
 82a:	96 e0       	ldi	r25, 0x06	; 6
 82c:	20 de       	rcall	.-960    	; 0x46e <ioport_configure_port_pin>
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	64 e0       	ldi	r22, 0x04	; 4
 834:	80 e4       	ldi	r24, 0x40	; 64
 836:	96 e0       	ldi	r25, 0x06	; 6
 838:	1a de       	rcall	.-972    	; 0x46e <ioport_configure_port_pin>
 83a:	40 e0       	ldi	r20, 0x00	; 0
 83c:	50 e0       	ldi	r21, 0x00	; 0
 83e:	68 e0       	ldi	r22, 0x08	; 8
 840:	80 e4       	ldi	r24, 0x40	; 64
 842:	96 e0       	ldi	r25, 0x06	; 6
 844:	14 de       	rcall	.-984    	; 0x46e <ioport_configure_port_pin>
 846:	43 e0       	ldi	r20, 0x03	; 3
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	60 e1       	ldi	r22, 0x10	; 16
 84c:	80 e4       	ldi	r24, 0x40	; 64
 84e:	96 e0       	ldi	r25, 0x06	; 6
 850:	0e de       	rcall	.-996    	; 0x46e <ioport_configure_port_pin>
 852:	41 e0       	ldi	r20, 0x01	; 1
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	60 e2       	ldi	r22, 0x20	; 32
 858:	80 e4       	ldi	r24, 0x40	; 64
 85a:	96 e0       	ldi	r25, 0x06	; 6
 85c:	08 de       	rcall	.-1008   	; 0x46e <ioport_configure_port_pin>
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	60 e4       	ldi	r22, 0x40	; 64
 864:	80 e4       	ldi	r24, 0x40	; 64
 866:	96 e0       	ldi	r25, 0x06	; 6
 868:	02 de       	rcall	.-1020   	; 0x46e <ioport_configure_port_pin>
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	60 e8       	ldi	r22, 0x80	; 128
 870:	80 e4       	ldi	r24, 0x40	; 64
 872:	96 e0       	ldi	r25, 0x06	; 6
 874:	fc dd       	rcall	.-1032   	; 0x46e <ioport_configure_port_pin>
 876:	43 e0       	ldi	r20, 0x03	; 3
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	80 e8       	ldi	r24, 0x80	; 128
 87e:	96 e0       	ldi	r25, 0x06	; 6
 880:	f6 dd       	rcall	.-1044   	; 0x46e <ioport_configure_port_pin>
 882:	41 e0       	ldi	r20, 0x01	; 1
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	62 e0       	ldi	r22, 0x02	; 2
 888:	80 e8       	ldi	r24, 0x80	; 128
 88a:	96 e0       	ldi	r25, 0x06	; 6
 88c:	f0 dd       	rcall	.-1056   	; 0x46e <ioport_configure_port_pin>
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	64 e0       	ldi	r22, 0x04	; 4
 894:	80 e8       	ldi	r24, 0x80	; 128
 896:	96 e0       	ldi	r25, 0x06	; 6
 898:	ea dd       	rcall	.-1068   	; 0x46e <ioport_configure_port_pin>
 89a:	43 e0       	ldi	r20, 0x03	; 3
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	68 e0       	ldi	r22, 0x08	; 8
 8a0:	80 e8       	ldi	r24, 0x80	; 128
 8a2:	96 e0       	ldi	r25, 0x06	; 6
 8a4:	e4 dd       	rcall	.-1080   	; 0x46e <ioport_configure_port_pin>
 8a6:	43 e0       	ldi	r20, 0x03	; 3
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	80 e6       	ldi	r24, 0x60	; 96
 8ae:	96 e0       	ldi	r25, 0x06	; 6
 8b0:	de dd       	rcall	.-1092   	; 0x46e <ioport_configure_port_pin>
 8b2:	43 e0       	ldi	r20, 0x03	; 3
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	80 e6       	ldi	r24, 0x60	; 96
 8ba:	96 e0       	ldi	r25, 0x06	; 6
 8bc:	d8 dd       	rcall	.-1104   	; 0x46e <ioport_configure_port_pin>
 8be:	43 e0       	ldi	r20, 0x03	; 3
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	64 e0       	ldi	r22, 0x04	; 4
 8c4:	80 e8       	ldi	r24, 0x80	; 128
 8c6:	96 e0       	ldi	r25, 0x06	; 6
 8c8:	d2 dd       	rcall	.-1116   	; 0x46e <ioport_configure_port_pin>
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	68 e0       	ldi	r22, 0x08	; 8
 8d0:	80 e8       	ldi	r24, 0x80	; 128
 8d2:	96 e0       	ldi	r25, 0x06	; 6
 8d4:	cc dd       	rcall	.-1128   	; 0x46e <ioport_configure_port_pin>
 8d6:	43 e0       	ldi	r20, 0x03	; 3
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	60 e1       	ldi	r22, 0x10	; 16
 8dc:	80 e6       	ldi	r24, 0x60	; 96
 8de:	96 e0       	ldi	r25, 0x06	; 6
 8e0:	c6 dd       	rcall	.-1140   	; 0x46e <ioport_configure_port_pin>
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	60 e4       	ldi	r22, 0x40	; 64
 8e8:	80 e6       	ldi	r24, 0x60	; 96
 8ea:	96 e0       	ldi	r25, 0x06	; 6
 8ec:	c0 dd       	rcall	.-1152   	; 0x46e <ioport_configure_port_pin>
 8ee:	43 e0       	ldi	r20, 0x03	; 3
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	60 e8       	ldi	r22, 0x80	; 128
 8f4:	80 e6       	ldi	r24, 0x60	; 96
 8f6:	96 e0       	ldi	r25, 0x06	; 6
 8f8:	ba dd       	rcall	.-1164   	; 0x46e <ioport_configure_port_pin>
 8fa:	43 e0       	ldi	r20, 0x03	; 3
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	96 e0       	ldi	r25, 0x06	; 6
 904:	b4 dd       	rcall	.-1176   	; 0x46e <ioport_configure_port_pin>
 906:	43 e0       	ldi	r20, 0x03	; 3
 908:	50 e0       	ldi	r21, 0x00	; 0
 90a:	60 e4       	ldi	r22, 0x40	; 64
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	96 e0       	ldi	r25, 0x06	; 6
 910:	ae dd       	rcall	.-1188   	; 0x46e <ioport_configure_port_pin>
 912:	43 e0       	ldi	r20, 0x03	; 3
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	60 e8       	ldi	r22, 0x80	; 128
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	96 e0       	ldi	r25, 0x06	; 6
 91c:	a8 dd       	rcall	.-1200   	; 0x46e <ioport_configure_port_pin>
 91e:	40 e0       	ldi	r20, 0x00	; 0
 920:	58 e1       	ldi	r21, 0x18	; 24
 922:	61 e0       	ldi	r22, 0x01	; 1
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	96 e0       	ldi	r25, 0x06	; 6
 928:	a2 dd       	rcall	.-1212   	; 0x46e <ioport_configure_port_pin>
 92a:	40 e0       	ldi	r20, 0x00	; 0
 92c:	58 e1       	ldi	r21, 0x18	; 24
 92e:	60 e2       	ldi	r22, 0x20	; 32
 930:	80 e6       	ldi	r24, 0x60	; 96
 932:	96 e0       	ldi	r25, 0x06	; 6
 934:	9c dd       	rcall	.-1224   	; 0x46e <ioport_configure_port_pin>
 936:	43 e0       	ldi	r20, 0x03	; 3
 938:	50 e0       	ldi	r21, 0x00	; 0
 93a:	64 e0       	ldi	r22, 0x04	; 4
 93c:	80 e2       	ldi	r24, 0x20	; 32
 93e:	96 e0       	ldi	r25, 0x06	; 6
 940:	96 dd       	rcall	.-1236   	; 0x46e <ioport_configure_port_pin>
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	68 e0       	ldi	r22, 0x08	; 8
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	96 e0       	ldi	r25, 0x06	; 6
 94c:	90 dd       	rcall	.-1248   	; 0x46e <ioport_configure_port_pin>
 94e:	41 e0       	ldi	r20, 0x01	; 1
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	62 e0       	ldi	r22, 0x02	; 2
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	96 e0       	ldi	r25, 0x06	; 6
 958:	8a cd       	rjmp	.-1260   	; 0x46e <ioport_configure_port_pin>
 95a:	08 95       	ret

0000095c <board_init>:
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	ioport_init();				//Initializes the IOPORT service	
	pinInit();					//whole chip pin init
 95c:	3e df       	rcall	.-388    	; 0x7da <pinInit>
	shiftRegisterInit();		//Configure SR specific pin modes, sets SR to default states
 95e:	75 cd       	rjmp	.-1302   	; 0x44a <shiftRegisterInit>
 960:	08 95       	ret

00000962 <main>:
#include "sequence.h"
#include "conf_board.h"

int main ()
{
	sysclk_init();
 962:	ad dd       	rcall	.-1190   	; 0x4be <sysclk_init>
	board_init();	
 964:	fb df       	rcall	.-10     	; 0x95c <board_init>
	while (1){
		toggleChargePump();
 966:	7d dd       	rcall	.-1286   	; 0x462 <toggleChargePump>
	}
 968:	fe cf       	rjmp	.-4      	; 0x966 <main+0x4>

0000096a <_exit>:
 96a:	f8 94       	cli

0000096c <__stop_program>:
 96c:	ff cf       	rjmp	.-2      	; 0x96c <__stop_program>
