
V2X_Sequencer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00802000  00802000  00000846  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a0  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b3  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001723  00000000  00000000  00004efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00006620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001681  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001121  00000000  00000000  00008271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	91 c2       	rjmp	.+1314   	; 0x53c <__vector_6>
  1a:	00 00       	nop
  1c:	b3 c2       	rjmp	.+1382   	; 0x584 <__vector_7>
  1e:	00 00       	nop
  20:	d5 c2       	rjmp	.+1450   	; 0x5cc <__vector_8>
  22:	00 00       	nop
  24:	f7 c2       	rjmp	.+1518   	; 0x614 <__vector_9>
  26:	00 00       	nop
  28:	19 c3       	rjmp	.+1586   	; 0x65c <__vector_10>
  2a:	00 00       	nop
  2c:	30 c3       	rjmp	.+1632   	; 0x68e <__vector_11>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c1       	rjmp	.+812    	; 0x362 <__vector_13>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	77 c1       	rjmp	.+750    	; 0x3a8 <__vector_46>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
  fe:	00 00       	nop
 100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
 102:	00 00       	nop
 104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
 106:	00 00       	nop
 108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
 10e:	00 00       	nop
 110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
 112:	00 00       	nop
 114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
 116:	00 00       	nop
 118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
 11e:	00 00       	nop
 120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
 122:	00 00       	nop
 124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
 126:	00 00       	nop
 128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
 12e:	00 00       	nop
 130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
 132:	00 00       	nop
 134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
 136:	00 00       	nop
 138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
 13e:	00 00       	nop
 140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
 142:	00 00       	nop
 144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
 146:	00 00       	nop
 148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
 14e:	00 00       	nop
 150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
 152:	00 00       	nop
 154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
 156:	00 00       	nop
 158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
 15e:	00 00       	nop
 160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
 162:	00 00       	nop
 164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
 166:	00 00       	nop
 168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
 16e:	00 00       	nop
 170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
 172:	00 00       	nop
 174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
 176:	00 00       	nop
 178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
 17e:	00 00       	nop
 180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
 182:	00 00       	nop
 184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
 186:	00 00       	nop
 188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
 18e:	00 00       	nop
 190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
 192:	00 00       	nop
 194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
 196:	00 00       	nop
 198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	d7 e2       	ldi	r29, 0x27	; 39
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e2 ed       	ldi	r30, 0xD2	; 210
 210:	f7 e0       	ldi	r31, 0x07	; 7
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a0 30       	cpi	r26, 0x00	; 0
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	ab 31       	cpi	r26, 0x1B	; 27
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	cc d2       	rcall	.+1432   	; 0x7c8 <main>
 230:	ce c2       	rjmp	.+1436   	; 0x7ce <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 238:	e0 91 00 20 	lds	r30, 0x2000
 23c:	f0 91 01 20 	lds	r31, 0x2001
 240:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 242:	83 ff       	sbrs	r24, 3
 244:	08 c0       	rjmp	.+16     	; 0x256 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 246:	88 60       	ori	r24, 0x08	; 8
 248:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 24e:	86 ef       	ldi	r24, 0xF6	; 246
 250:	80 93 0a 20 	sts	0x200A, r24
 254:	83 c0       	rjmp	.+262    	; 0x35c <twim_interrupt_handler+0x128>
 256:	98 2f       	mov	r25, r24
 258:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 25a:	31 f0       	breq	.+12     	; 0x268 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	80 93 0a 20 	sts	0x200A, r24
 266:	7a c0       	rjmp	.+244    	; 0x35c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 268:	86 ff       	sbrs	r24, 6
 26a:	43 c0       	rjmp	.+134    	; 0x2f2 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e2       	ldi	r29, 0x20	; 32
 270:	aa 81       	ldd	r26, Y+2	; 0x02
 272:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	9d 81       	ldd	r25, Y+5	; 0x05
 278:	14 96       	adiw	r26, 0x04	; 4
 27a:	2d 91       	ld	r18, X+
 27c:	3c 91       	ld	r19, X
 27e:	15 97       	sbiw	r26, 0x05	; 5
 280:	82 17       	cp	r24, r18
 282:	93 07       	cpc	r25, r19
 284:	6c f4       	brge	.+26     	; 0x2a0 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 286:	9c 01       	movw	r18, r24
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
 28c:	20 93 04 20 	sts	0x2004, r18
 290:	30 93 05 20 	sts	0x2005, r19
 294:	a8 0f       	add	r26, r24
 296:	b9 1f       	adc	r27, r25
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	8c 91       	ld	r24, X
 29c:	87 83       	std	Z+7, r24	; 0x07
 29e:	5e c0       	rjmp	.+188    	; 0x35c <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
 2a0:	80 91 06 20 	lds	r24, 0x2006
 2a4:	90 91 07 20 	lds	r25, 0x2007
 2a8:	18 96       	adiw	r26, 0x08	; 8
 2aa:	2d 91       	ld	r18, X+
 2ac:	3c 91       	ld	r19, X
 2ae:	19 97       	sbiw	r26, 0x09	; 9
 2b0:	82 17       	cp	r24, r18
 2b2:	93 07       	cpc	r25, r19
 2b4:	c8 f4       	brcc	.+50     	; 0x2e8 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
 2b6:	20 91 08 20 	lds	r18, 0x2008
 2ba:	22 23       	and	r18, r18
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 2be:	86 81       	ldd	r24, Z+6	; 0x06
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	86 83       	std	Z+6, r24	; 0x06
 2c4:	4b c0       	rjmp	.+150    	; 0x35c <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
 2c6:	16 96       	adiw	r26, 0x06	; 6
 2c8:	2d 91       	ld	r18, X+
 2ca:	3c 91       	ld	r19, X
 2cc:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 2ce:	ac 01       	movw	r20, r24
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	40 93 06 20 	sts	0x2006, r20
 2d8:	50 93 07 20 	sts	0x2007, r21
 2dc:	d9 01       	movw	r26, r18
 2de:	a8 0f       	add	r26, r24
 2e0:	b9 1f       	adc	r27, r25
 2e2:	8c 91       	ld	r24, X
 2e4:	87 83       	std	Z+7, r24	; 0x07
 2e6:	3a c0       	rjmp	.+116    	; 0x35c <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 2ec:	10 92 0a 20 	sts	0x200A, r1
 2f0:	35 c0       	rjmp	.+106    	; 0x35c <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 2f2:	88 23       	and	r24, r24
 2f4:	84 f5       	brge	.+96     	; 0x356 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 2f6:	a0 e0       	ldi	r26, 0x00	; 0
 2f8:	b0 e2       	ldi	r27, 0x20	; 32
 2fa:	12 96       	adiw	r26, 0x02	; 2
 2fc:	cd 91       	ld	r28, X+
 2fe:	dc 91       	ld	r29, X
 300:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 302:	16 96       	adiw	r26, 0x06	; 6
 304:	8d 91       	ld	r24, X+
 306:	9c 91       	ld	r25, X
 308:	17 97       	sbiw	r26, 0x07	; 7
 30a:	28 85       	ldd	r18, Y+8	; 0x08
 30c:	39 85       	ldd	r19, Y+9	; 0x09
 30e:	82 17       	cp	r24, r18
 310:	93 07       	cpc	r25, r19
 312:	d8 f4       	brcc	.+54     	; 0x34a <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
 314:	6e 81       	ldd	r22, Y+6	; 0x06
 316:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 318:	9c 01       	movw	r18, r24
 31a:	2f 5f       	subi	r18, 0xFF	; 255
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	20 93 06 20 	sts	0x2006, r18
 322:	30 93 07 20 	sts	0x2007, r19
 326:	47 81       	ldd	r20, Z+7	; 0x07
 328:	db 01       	movw	r26, r22
 32a:	a8 0f       	add	r26, r24
 32c:	b9 1f       	adc	r27, r25
 32e:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 330:	88 85       	ldd	r24, Y+8	; 0x08
 332:	99 85       	ldd	r25, Y+9	; 0x09
 334:	28 17       	cp	r18, r24
 336:	39 07       	cpc	r19, r25
 338:	18 f4       	brcc	.+6      	; 0x340 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	83 83       	std	Z+3, r24	; 0x03
 33e:	0e c0       	rjmp	.+28     	; 0x35c <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 340:	87 e0       	ldi	r24, 0x07	; 7
 342:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 344:	10 92 0a 20 	sts	0x200A, r1
 348:	09 c0       	rjmp	.+18     	; 0x35c <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 34e:	89 ef       	ldi	r24, 0xF9	; 249
 350:	80 93 0a 20 	sts	0x200A, r24
 354:	03 c0       	rjmp	.+6      	; 0x35c <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 356:	8b ef       	ldi	r24, 0xFB	; 251
 358:	80 93 0a 20 	sts	0x200A, r24
	}
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
 384:	57 df       	rcall	.-338    	; 0x234 <twim_interrupt_handler>
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
 3ca:	34 df       	rcall	.-408    	; 0x234 <twim_interrupt_handler>
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <shiftRegisterLatch>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 3ee:	e0 e4       	ldi	r30, 0x40	; 64
 3f0:	f6 e0       	ldi	r31, 0x06	; 6
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 3f6:	85 83       	std	Z+5, r24	; 0x05
 3f8:	08 95       	ret

000003fa <shiftRegisterClear>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 3fa:	e0 e4       	ldi	r30, 0x40	; 64
 3fc:	f6 e0       	ldi	r31, 0x06	; 6
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 402:	85 83       	std	Z+5, r24	; 0x05
 404:	08 95       	ret

00000406 <shiftRegisterInit>:
#include <gpio.h>
#include <delay.h>

void shiftRegisterInit(void)
{
	shiftRegisterClear();
 406:	f9 df       	rcall	.-14     	; 0x3fa <shiftRegisterClear>
	shiftRegisterLatch();
 408:	f2 cf       	rjmp	.-28     	; 0x3ee <shiftRegisterLatch>
 40a:	08 95       	ret

0000040c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	fc 01       	movw	r30, r24
 412:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 418:	c6 2f       	mov	r28, r22
 41a:	d0 e0       	ldi	r29, 0x00	; 0
 41c:	de 01       	movw	r26, r28
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <ioport_configure_port_pin+0x1a>
 422:	b5 95       	asr	r27
 424:	a7 95       	ror	r26
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <ioport_configure_port_pin+0x16>
 42a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 42c:	50 83       	st	Z, r21
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 434:	28 30       	cpi	r18, 0x08	; 8
 436:	31 05       	cpc	r19, r1
 438:	89 f7       	brne	.-30     	; 0x41c <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 43a:	40 ff       	sbrs	r20, 0
 43c:	0a c0       	rjmp	.+20     	; 0x452 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 43e:	41 ff       	sbrs	r20, 1
 440:	03 c0       	rjmp	.+6      	; 0x448 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 442:	fc 01       	movw	r30, r24
 444:	65 83       	std	Z+5, r22	; 0x05
 446:	02 c0       	rjmp	.+4      	; 0x44c <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 448:	fc 01       	movw	r30, r24
 44a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 44c:	fc 01       	movw	r30, r24
 44e:	61 83       	std	Z+1, r22	; 0x01
 450:	02 c0       	rjmp	.+4      	; 0x456 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 452:	fc 01       	movw	r30, r24
 454:	62 83       	std	Z+2, r22	; 0x02
	}
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	80 93 70 00 	sts	0x0070, r24
 462:	80 93 71 00 	sts	0x0071, r24
 466:	80 93 72 00 	sts	0x0072, r24
 46a:	80 93 73 00 	sts	0x0073, r24
 46e:	80 93 74 00 	sts	0x0074, r24
 472:	80 93 75 00 	sts	0x0075, r24
 476:	80 93 76 00 	sts	0x0076, r24
 47a:	08 95       	ret

0000047c <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	f9 01       	movw	r30, r18
 486:	71 96       	adiw	r30, 0x11	; 17
 488:	e2 95       	swap	r30
 48a:	f2 95       	swap	r31
 48c:	f0 7f       	andi	r31, 0xF0	; 240
 48e:	fe 27       	eor	r31, r30
 490:	e0 7f       	andi	r30, 0xF0	; 240
 492:	fe 27       	eor	r31, r30
 494:	a0 e0       	ldi	r26, 0x00	; 0
 496:	b1 e0       	ldi	r27, 0x01	; 1
 498:	14 96       	adiw	r26, 0x04	; 4
 49a:	9c 91       	ld	r25, X
 49c:	14 97       	sbiw	r26, 0x04	; 4
 49e:	13 96       	adiw	r26, 0x03	; 3
 4a0:	6c 91       	ld	r22, X
 4a2:	d9 01       	movw	r26, r18
 4a4:	14 96       	adiw	r26, 0x04	; 4
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	ea 01       	movw	r28, r20
 4ac:	0a 2e       	mov	r0, r26
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <dma_interrupt+0x38>
 4b0:	cc 0f       	add	r28, r28
 4b2:	dd 1f       	adc	r29, r29
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <dma_interrupt+0x34>
 4b8:	08 2e       	mov	r0, r24
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <dma_interrupt+0x44>
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <dma_interrupt+0x40>
 4c4:	4c 2b       	or	r20, r28
 4c6:	64 23       	and	r22, r20
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	eb 01       	movw	r28, r22
 4cc:	0a 2e       	mov	r0, r26
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <dma_interrupt+0x58>
 4d0:	d5 95       	asr	r29
 4d2:	c7 95       	ror	r28
 4d4:	0a 94       	dec	r0
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <dma_interrupt+0x54>
 4d8:	c0 fd       	sbrc	r28, 0
 4da:	1a c0       	rjmp	.+52     	; 0x510 <dma_interrupt+0x94>
 4dc:	08 2e       	mov	r0, r24
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <dma_interrupt+0x68>
 4e0:	75 95       	asr	r23
 4e2:	67 95       	ror	r22
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <dma_interrupt+0x64>
 4e8:	60 fd       	sbrc	r22, 0
 4ea:	14 c0       	rjmp	.+40     	; 0x514 <dma_interrupt+0x98>
 4ec:	49 23       	and	r20, r25
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	ba 01       	movw	r22, r20
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <dma_interrupt+0x7c>
 4f4:	75 95       	asr	r23
 4f6:	67 95       	ror	r22
 4f8:	aa 95       	dec	r26
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <dma_interrupt+0x78>
 4fc:	60 fd       	sbrc	r22, 0
 4fe:	0c c0       	rjmp	.+24     	; 0x518 <dma_interrupt+0x9c>
 500:	02 c0       	rjmp	.+4      	; 0x506 <dma_interrupt+0x8a>
 502:	55 95       	asr	r21
 504:	47 95       	ror	r20
 506:	8a 95       	dec	r24
 508:	e2 f7       	brpl	.-8      	; 0x502 <dma_interrupt+0x86>
 50a:	84 2f       	mov	r24, r20
 50c:	81 70       	andi	r24, 0x01	; 1
 50e:	05 c0       	rjmp	.+10     	; 0x51a <dma_interrupt+0x9e>
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	03 c0       	rjmp	.+6      	; 0x51a <dma_interrupt+0x9e>
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	01 c0       	rjmp	.+2      	; 0x51a <dma_interrupt+0x9e>
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	91 81       	ldd	r25, Z+1	; 0x01
 51c:	90 63       	ori	r25, 0x30	; 48
 51e:	91 83       	std	Z+1, r25	; 0x01
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	f9 01       	movw	r30, r18
 526:	e5 5f       	subi	r30, 0xF5	; 245
 528:	ff 4d       	sbci	r31, 0xDF	; 223
 52a:	01 90       	ld	r0, Z+
 52c:	f0 81       	ld	r31, Z
 52e:	e0 2d       	mov	r30, r0
 530:	30 97       	sbiw	r30, 0x00	; 0
 532:	09 f0       	breq	.+2      	; 0x536 <dma_interrupt+0xba>
 534:	09 95       	icall
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	6f 93       	push	r22
 550:	7f 93       	push	r23
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	af 93       	push	r26
 558:	bf 93       	push	r27
 55a:	ef 93       	push	r30
 55c:	ff 93       	push	r31
	dma_interrupt(0);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	8d df       	rcall	.-230    	; 0x47c <dma_interrupt>
}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	2f 93       	push	r18
 590:	3f 93       	push	r19
 592:	4f 93       	push	r20
 594:	5f 93       	push	r21
 596:	6f 93       	push	r22
 598:	7f 93       	push	r23
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
 59e:	af 93       	push	r26
 5a0:	bf 93       	push	r27
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
	dma_interrupt(1);
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	69 df       	rcall	.-302    	; 0x47c <dma_interrupt>
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	dma_interrupt(2);
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	45 df       	rcall	.-374    	; 0x47c <dma_interrupt>
}
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
	dma_interrupt(3);
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	21 df       	rcall	.-446    	; 0x47c <dma_interrupt>
}
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	bf 91       	pop	r27
 640:	af 91       	pop	r26
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	7f 91       	pop	r23
 648:	6f 91       	pop	r22
 64a:	5f 91       	pop	r21
 64c:	4f 91       	pop	r20
 64e:	3f 91       	pop	r19
 650:	2f 91       	pop	r18
 652:	0f 90       	pop	r0
 654:	0f be       	out	0x3f, r0	; 63
 656:	0f 90       	pop	r0
 658:	1f 90       	pop	r1
 65a:	18 95       	reti

0000065c <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
 65c:	1f 92       	push	r1
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31
	rtc_data.counter_high++;
 66e:	e3 e1       	ldi	r30, 0x13	; 19
 670:	f0 e2       	ldi	r31, 0x20	; 32
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	80 83       	st	Z, r24
 67a:	91 83       	std	Z+1, r25	; 0x01
}
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	cf 92       	push	r12
 69a:	df 92       	push	r13
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	2f 93       	push	r18
 6a6:	3f 93       	push	r19
 6a8:	4f 93       	push	r20
 6aa:	5f 93       	push	r21
 6ac:	6f 93       	push	r22
 6ae:	7f 93       	push	r23
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	af 93       	push	r26
 6b6:	bf 93       	push	r27
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
 6bc:	e3 e1       	ldi	r30, 0x13	; 19
 6be:	f0 e2       	ldi	r31, 0x20	; 32
 6c0:	80 81       	ld	r24, Z
 6c2:	91 81       	ldd	r25, Z+1	; 0x01
 6c4:	22 81       	ldd	r18, Z+2	; 0x02
 6c6:	33 81       	ldd	r19, Z+3	; 0x03
 6c8:	82 17       	cp	r24, r18
 6ca:	93 07       	cpc	r25, r19
 6cc:	f0 f1       	brcs	.+124    	; 0x74a <__vector_11+0xbc>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 6ce:	21 e0       	ldi	r18, 0x01	; 1
 6d0:	20 93 02 04 	sts	0x0402, r18
		if (rtc_data.callback) {
 6d4:	e0 91 19 20 	lds	r30, 0x2019
 6d8:	f0 91 1a 20 	lds	r31, 0x201A
 6dc:	30 97       	sbiw	r30, 0x00	; 0
 6de:	a9 f1       	breq	.+106    	; 0x74a <__vector_11+0xbc>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
 6e0:	60 91 08 04 	lds	r22, 0x0408
 6e4:	70 91 09 04 	lds	r23, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 6e8:	a0 e0       	ldi	r26, 0x00	; 0
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	dc 01       	movw	r26, r24
 6ee:	99 27       	eor	r25, r25
 6f0:	88 27       	eor	r24, r24
					| RTC.CNT;
 6f2:	ab 01       	movw	r20, r22
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 6f8:	8c 01       	movw	r16, r24
 6fa:	9d 01       	movw	r18, r26
 6fc:	04 2b       	or	r16, r20
 6fe:	15 2b       	or	r17, r21
 700:	26 2b       	or	r18, r22
 702:	37 2b       	or	r19, r23
 704:	c9 01       	movw	r24, r18
 706:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 708:	a3 e1       	ldi	r26, 0x13	; 19
 70a:	b0 e2       	ldi	r27, 0x20	; 32
 70c:	12 96       	adiw	r26, 0x02	; 2
 70e:	0d 91       	ld	r16, X+
 710:	1c 91       	ld	r17, X
 712:	13 97       	sbiw	r26, 0x03	; 3
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	98 01       	movw	r18, r16
 71a:	11 27       	eor	r17, r17
 71c:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
 71e:	14 96       	adiw	r26, 0x04	; 4
 720:	cd 90       	ld	r12, X+
 722:	dc 90       	ld	r13, X
 724:	15 97       	sbiw	r26, 0x05	; 5
 726:	e1 2c       	mov	r14, r1
 728:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 72a:	0c 29       	or	r16, r12
 72c:	1d 29       	or	r17, r13
 72e:	2e 29       	or	r18, r14
 730:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
 732:	06 17       	cp	r16, r22
 734:	17 07       	cpc	r17, r23
 736:	28 07       	cpc	r18, r24
 738:	39 07       	cpc	r19, r25
 73a:	30 f0       	brcs	.+12     	; 0x748 <__vector_11+0xba>
				count = alarm + 1;
 73c:	c9 01       	movw	r24, r18
 73e:	b8 01       	movw	r22, r16
 740:	6f 5f       	subi	r22, 0xFF	; 255
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
 748:	09 95       	icall
		}
	}
}
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	bf 91       	pop	r27
 750:	af 91       	pop	r26
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	7f 91       	pop	r23
 758:	6f 91       	pop	r22
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	0f 90       	pop	r0
 770:	0f be       	out	0x3f, r0	; 63
 772:	0f 90       	pop	r0
 774:	1f 90       	pop	r1
 776:	18 95       	reti

00000778 <board_init>:
//#define SPI_CHANNEL (&AVR32_SPI0)

//TWI_Slave_t slave;

void board_init(void)
{
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 77c:	43 e0       	ldi	r20, 0x03	; 3
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	60 e8       	ldi	r22, 0x80	; 128
 782:	80 e4       	ldi	r24, 0x40	; 64
 784:	96 e0       	ldi	r25, 0x06	; 6
 786:	42 de       	rcall	.-892    	; 0x40c <ioport_configure_port_pin>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 788:	c0 e4       	ldi	r28, 0x40	; 64
 78a:	d6 e0       	ldi	r29, 0x06	; 6
 78c:	80 e8       	ldi	r24, 0x80	; 128
 78e:	8e 83       	std	Y+6, r24	; 0x06
 790:	43 e0       	ldi	r20, 0x03	; 3
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	60 e2       	ldi	r22, 0x20	; 32
 796:	80 e4       	ldi	r24, 0x40	; 64
 798:	96 e0       	ldi	r25, 0x06	; 6
 79a:	38 de       	rcall	.-912    	; 0x40c <ioport_configure_port_pin>
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	8e 83       	std	Y+6, r24	; 0x06
 7a0:	43 e0       	ldi	r20, 0x03	; 3
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	62 e0       	ldi	r22, 0x02	; 2
 7a6:	80 e4       	ldi	r24, 0x40	; 64
 7a8:	96 e0       	ldi	r25, 0x06	; 6
 7aa:	30 de       	rcall	.-928    	; 0x40c <ioport_configure_port_pin>
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	8e 83       	std	Y+6, r24	; 0x06
 7b0:	43 e0       	ldi	r20, 0x03	; 3
 7b2:	50 e0       	ldi	r21, 0x00	; 0
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	80 e4       	ldi	r24, 0x40	; 64
 7b8:	96 e0       	ldi	r25, 0x06	; 6
 7ba:	28 de       	rcall	.-944    	; 0x40c <ioport_configure_port_pin>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	8d 83       	std	Y+5, r24	; 0x05
	ioport_configure_pin(SR_LATCH, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	ioport_set_pin_low(SR_LATCH);
	ioport_configure_pin(SR_CLEAR, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	ioport_set_pin_high(SR_CLEAR);
	// Step 1 clear all shift register outputs
	shiftRegisterInit(); //Configure SR specific pin modes, sets SR to default states
 7c0:	22 de       	rcall	.-956    	; 0x406 <shiftRegisterInit>
	//usart_init_spi(USART_t)
	
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <main>:
#include "conf_board.h"

int main ()
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 7c8:	49 de       	rcall	.-878    	; 0x45c <sysclk_init>
	while (1){
		board_init();	
 7ca:	d6 df       	rcall	.-84     	; 0x778 <board_init>
	}
 7cc:	fe cf       	rjmp	.-4      	; 0x7ca <main+0x2>

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
